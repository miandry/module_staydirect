<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_cron().
 *
 * Cette fonction est exécutée chaque fois que le cron de Drupal est lancé.
 */

 function booking_staydirect_cron() {
   /// $service_manage = \Drupal::service('mz_staydirect.manage');
  //  $service_manage->disableUnsubscribeSite();
  } 


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function booking_staydirect_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    $string = $form['#form_id'] ;
    if( $string == 'node_notification_form' || $string == 'node_notification_edit_form' ){
        $form['actions']['submit']['#submit'][] = '__mz_booking_custom_redirect_after_save';
    }
    if (str_starts_with($string, 'block_content_') && str_ends_with($string, '_edit_form')) {

            foreach($form['field_paragraphs']['widget'] as $key => $item){
                if (is_numeric($key) && $form['field_paragraphs']['widget'][$key]["#paragraph_type"] == "guides"
                ) {
                        if(is_numeric($key) && isset($form['field_paragraphs']['widget'][$key]["subform"]["field_icon1"]["widget"]["open_button"])){
                            
                            $form['field_paragraphs']['widget'][$key]["subform"]["field_icon1"]["widget"]["open_button"]["#value"] =  t('Add Icon');
                        }
                }
                if( is_numeric($key) && $form['field_paragraphs']['widget'][$key]["#paragraph_type"] == "footer"){

                      $form['field_paragraphs']['widget'][$key]["subform"]["field_icon"]["widget"]["open_button"]["#value"] =  t('Add Icon');
                    
                }
                if( is_numeric($key) && $form['field_paragraphs']['widget'][$key]["#paragraph_type"] == "contact"){

                    $form['field_paragraphs']['widget'][$key]["subform"]["field_icon1"]["widget"]["open_button"]["#value"] =  t('Add Icon');
                  
                }
                
            }
            
      
      }
  
  
  }

  
  
  /**
   * Custom submit handler to change redirect after saving the node.
   */
  function __mz_booking_custom_redirect_after_save(array &$form, FormStateInterface $form_state) {
    $node = $form_state->getFormObject()->getEntity();
    if ($node instanceof \Drupal\node\NodeInterface && $node->bundle() == "notification" ) {
      // Redirect to the edit page of the same node.
     $form_state->setRedirect('entity.node.edit_form', ['node' => $node->id()]);
    }
  }

  function  booking_staydirect_preprocess_page(&$variables) {
    $current_path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    if ($alias === '/booking-process') {
      $request = \Drupal::request();
      $params = $request->query->all();
      if(!isset($params['termService'])){
        foreach($params as $key => $item){
          $temp_store_factory = \Drupal::service('session_based_temp_store');
          $uid = \Drupal::currentUser()->id();// User ID
          $temp_store = $temp_store_factory->get($uid.'_order_booking', 106400); 
          $data = $temp_store->set('data',$params);
        }
      }
    }
  }
/**
 * Implements hook_preprocess_user().
 */
function  booking_staydirect_preprocess_user(&$variables) {
  // Check view mode

  if ($variables['elements']['#view_mode'] === 'full') {
    $temp_store_factory = \Drupal::service('session_based_temp_store');
    $uid = \Drupal::currentUser()->id();// User ID
    $temp_store = $temp_store_factory->get($uid.'_order_booking', 106400); 
    $data = $temp_store->get('data');
    if( $data ){
      $str = "<a href='/booking-process?"; 
      foreach($data as $key => $item){
        $str =  $str . $key . "=" . $item."&" ;
      }
      $str =  $str ."'> Please click here to proceed. </a><br/>";	
      $variables['booking_in_process']= $str;
      $variables['#cache']['max-age'] = 0;  // No cache
    }
  
   
  }
}
