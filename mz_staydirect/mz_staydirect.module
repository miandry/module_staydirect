<?php
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Form\FormStateInterface;


/**
 * Custom submit handler for the login form.
 */
function mymodule_custom_login_redirect($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $query = \Drupal::request()->query;
  if ($query->has('getstarted') && $query->get('getstarted') == '1') {
    $form_state->setRedirectUrl(\Drupal\Core\Url::fromUri('internal:/order'));
  }
}
/**
 * Custom validation function for the phone field.
 */
function _mz_staydirect_phone_number_validate($form, FormStateInterface &$form_state) {
 
  $phone_number_array = $form_state->getValue('field_phone');
  $phone_number = $phone_number_array[0]['value'] ;
  if( $phone_number && trim($phone_number)!= ""){
    $pattern = '/^(?:\+1\s)?\(?(?:\d{3})\)?[\s.-]?\d{3}[\s.-]?\d{4}$/';
    // Example validation: U.S. phone number format
    if (!preg_match( $pattern, $phone_number)) {
      $form_state->setErrorByName($phone_number, t('Please enter a valid phone number in the format: (xxx) xxx-xxxx.'));
    }
  }
}


/**
 * Implements hook_user_login().
 */
function mz_staydirect_user_login($account) {
  // Check if the user has the 'content_editor' role.
  global $site_variables;
  if(isset($site_variables["site_name"])){
    if( in_array('content_editor', $account->getRoles()) 
    || in_array('webmaster', $account->getRoles())) {
      $service_booking = \Drupal::service('mz_staydirect.manage');
      $service_booking->setPermissionOfSite();
    }
  }

}

/**
 * @file
 * Contains mz_chat.module.
 */

function mz_staydirect_form_alter(&$form, &$form_state, $form_id)  {
    if ($form_id == 'user_login_form') {
      $form['#submit'][] = 'mymodule_custom_login_redirect';
    }
    if($form_id == 'user_form'){
      $form['#validate'][] = '_mz_staydirect_phone_number_validate';
    }
  
   // $form['field_phone']['#element_validate'][] = '_mz_staydirect_phone_number_validate';

    if($form_id === "node_article_edit_form") {
            $form['name_description'] = [
                                          '#markup' => '<p id="mz-alert">To save your changes, please click the <strong>Save</strong> button located in the top-right corner.</p>',
                                          '#weight' => -10,
                                        ];
        $form["actions"]["submit"]["#value"] = "Click here to save your change";
    }
    if($form_id =='node_booking_edit_form'){
       $current_user = \Drupal::currentUser();
       $roles = $current_user->getRoles();
       if (in_array('webmaster', $roles) || in_array('content_editor', $roles)) {
          $form['title']['#attributes']['readonly'] = 'readonly';
          $form['field_client']['widget'][0]["target_id"]['#attributes']['readonly'] = 'readonly';
          $form['field_item']['widget'][0]["target_id"]['#attributes']['readonly'] = 'readonly';
          $form['field_price_default']['#attributes']['readonly'] = 'readonly';
          $form['field_price_with_tax']['#attributes']['readonly'] = 'readonly';
          
          
          $form['field_dates']['widget'][0]["value"]['#attributes']['readonly'] = 'readonly';
          $form['field_dates']['widget'][0]["end_value"]['#attributes']['readonly'] = 'readonly';
          
          
            $inline_css_body = [
                        '#type' => 'html_tag',
                        '#tag' => 'style',
                        '#value' => "
                            #edit-body-wrapper{ pointer-events: none; }
                        ",
                    ];
            $form['#attached']['html_head'][] = [$inline_css_body, 'inline_css_body'];
        }
          
    }

     $service = \Drupal::service('mz_staydirect.manage');
     $status = $service->checkString($form_id);
      
   if($status ){
    $t = \Drupal::request()->query->get('destination');
    $form['actions']['back_to_site'] = [
      '#type' => 'link',
      '#title' => t('< Back to Site'),
      '#url' => Url::fromUri('internal:/'.$t),
      '#attributes' => ['class' => ['button']],
    ];
    $inline_css = [
        '#type' => 'html_tag',
        '#tag' => 'style',
        '#value' => "
            #block-gin-breadcrumbs,.field--name-info { display:none;}
        ",
    ];

    // Attach inline CSS to the form
    $form['#attached']['html_head'][] = [$inline_css, 'form_custom_style'];
   }
  if ($form_id == 'user_login_form') {
    $form['#theme'] = 'user_login_form_custom';
  }

  if ($form_id == 'user_form') {
    $form['#cache']['max-age'] = 0;
    $form['actions']['submit']['#submit'][] = '_mz_staydirect_custom_submit';
     $form['actions']['submit']['#submit'][] = '_mz_staydirect_redirect_submit';

    $current_user = \Drupal::currentUser();
    $route_match = \Drupal::routeMatch();
    $user = $route_match->getParameter('user');
    if ($user instanceof AccountInterface && $current_user->id() === $user->id()) {
        if($user->hasRole('webmaster')){
         // Hide roles and status fields
           if (isset($form['account']['roles'])) {
                     $inline_css_roles = [
                            '#type' => 'html_tag',
                            '#tag' => 'style',
                            '#value' => "
                                #edit-role-change-wrapper{ display:none;}
                            ",
                        ];
              // Attach inline CSS to the form
                $form['#attached']['html_head'][] = [$inline_css_roles, 'inline_css_roles'];
            }
            if (isset($form['account']['status'])) {
                    $form['account']['status']['#attributes']['style'] = 'display: none;';
            }
    
            // Hide delete button
            if (isset($form['actions']['delete'])) {
                $form['actions']['delete']['#access'] = FALSE;
            }
        }
       
        
        
        
    }else{
        $form['field_phone']['widget'][0]["value"]['#attributes']['readonly'] = 'readonly';
    }
    
    

      
      $current_request = \Drupal::request();
       // Check for the specific URL parameter
      if ($current_request->query->has('pass-reset-token')) {
                 global $site_variables;
                 $username = $current_user->getAccountName() ;
                 if ($user instanceof AccountInterface && $current_user->id() === $user->id()) {
                       if(isset( $site_variables['email'])){
                        $form['account']['mail']['#default_value'] = $site_variables['email'];         
                       }
           
                       $inline_css_hide = [
                        '#type' => 'html_tag',
                        '#tag' => 'style',
                        '#value' => "
                           input#edit-mail,input.username{background-color: lightgray;}.gin-secondary-toolbar,.tabs-wrapper.is-horizontal,#toolbar-administration{ display:none!important;}.page-wrapper.dialog-off-canvas-main-canvas{margin-left: -240px;}
                        ",
                    ];
                              // Attach inline CSS to the form
                                $form['#attached']['html_head'][] = [$inline_css_hide, 'inline_css_hide'];
                                $form['field_first_name']['#attributes']['style'] = 'display: none;';
                                $form['field_last_name']['#attributes']['style'] = 'display: none;';
                                $form['field_phone']['#attributes']['style'] = 'display: none;';
                                $form['account']['name']['#attributes']['readonly'] = 'readonly';
                                $form['account']['mail']['#attributes']['readonly'] = 'readonly';
                          
                         
                 
             
                 // Make the password field required
                 $form['account']['pass']['#required'] = TRUE;
                 $form['account']['status']['#attributes']['style'] = 'display: none;';
                 $form['account']['roles']['#attributes']['style'] = 'display: none;';
                 }
                 if ( isset($site_variables['username']) && $user instanceof AccountInterface && $current_user->id() === $user->id() &&  $username == $site_variables['username']) {           
                  $service = \Drupal::service('mz_staydirect.manage');
                  $service->deleteDemoUser();
                }
          

      }else{
      
             $ta = \Drupal::request()->query->get('destination');
                $form['actions']['back_to_site'] = [
                  '#type' => 'link',
                  '#title' => t(' Cancel '),
                  '#url' => Url::fromUri('internal:'.$ta),
                  '#attributes' => ['class' => ['button']],
                ];
      
      
      
      }
      
      if(isset($form['actions']['delete'])){
      $form['actions']['delete']['#title'] = t('Delete account');
      }
       
    

  }

}
/**
 * Custom submit handler for user profile edit form.
 */
function _mz_staydirect_redirect_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
      $d = \Drupal::request()->query->get('destination');
      if($d == NULL){
          $external_url = "/user";
          $response = new RedirectResponse($external_url, 302);
          $response->send();
          return;
       }
}
/**
 * Custom submit handler for user profile edit form.
 */
function _mz_staydirect_custom_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Get the current user and the user entity being edited.
  $current_user = \Drupal::currentUser();
  $user = $form_state->getFormObject()->getEntity();
  // Check if the current user is editing their own account.
  if ($current_user->id() == $user->id()) {
      $template_config = \Drupal::config('mz_payement.status');
      $status = $template_config->get( 'status');
      $site_variables = $template_config->get( 'site_variables');

      //template only
      if($status && $site_variables){
        $config = \Drupal::config('mz_payement.stripe');
        $accountId =  $config->get('account');
      
        if($accountId == NULL){
          $external_url = "/admin/bank/page";
          $response = new RedirectResponse($external_url, 302);
          $response->send();
          return;
          
        }
      }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for the user login form.
 */
function mz_staydirect_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['form']) && $variables['form']['#form_id'] === 'user_login_form') {
    $suggestions[] = 'form__user_login';
  }
  if (isset($variables['form']) && $variables['form']['#form_id'] === 'user_login_form') {
    $suggestions[] = 'form__user_register';
  }
  if (isset($variables['form']) && $variables['form']['#form_id'] === 'user_login_form') {
    $suggestions[] = 'form__user_pass';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mz_staydirect_preprocess_block(&$variables) {
  if(isset($variables['content']) && isset($variables['content']['#block_content'])){
    global $site_variables ;
    $block_object = $variables['content']['#block_content'];
    $type = $block_object->bundle();
    $service_booking = \Drupal::service('mz_booking.manager');

    $variables['#cache']['max-age'] = 0;
    if($type =='header'){
      $variables['site_variables'] = $site_variables;
    }
    if($type == "contact"){
    
      $service = \Drupal::service('drupal.helper');
      $params = $service->helper->get_parameter();
      if(isset($params['email']) && isset($params['request_body'])){
          $config = \Drupal::config('mz_staydirect.settings');
          $site_infos = $config->get('site_variables');
          $email = \Drupal::config('system.site')->get('mail');
          if( isset($site_infos["email"])){
            $email = $site_infos["email"];
          }
          
         $status =  $service->helper->send_mail_simple($params['request_body'], $email ,$params['email'],'Send Request ');
         if(  $status ) {
          $message = "Your request is sent successfully...";
          \Drupal::messenger()->addMessage($message);
         }else {
          $message =  "Your request could not be sent...";
          \Drupal::messenger()->addMessage($message,'error');
         }
      }

    }
  }
}
/**
 * Implements hook_cron().
 *
 * Cette fonction est exécutée chaque fois que le cron de Drupal est lancé.
 */

function mz_staydirect_cron() {
  $service_manage = \Drupal::service('mz_staydirect.manage');
  $service_manage->disableUnsubscribeSite();
} 

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function mz_staydirect_preprocess_page(&$variables) {
  global $site_variables ;
  if($site_variables && $site_variables["email"] && isset($site_variables["site_theme"])){
      // Check the value of a configuration variable.
      $config = \Drupal::config('mz_staydirect.settings');
      $site_infos = $config->get('site_variables');
      if($site_infos == null ){
          \Drupal::configFactory()->getEditable('mz_staydirect.settings')
          ->set('site_variables',$site_variables)
          ->save();
          $service_manage = \Drupal::service('mz_staydirect.manage');
          $new_username = $site_variables[ 'username' ];
          $service_manage->update_username('admin', $new_username ) ;

      }
  }
}

//template size
function mz_staydirect_preprocess_html(&$variables) {
  $service_helper = \Drupal::service('drupal.helper');
  $params = $service_helper->helper->get_parameter();
  if(isset($params['cache']) && $params['cache']==1 ){
    drupal_flush_all_caches();
  }
  
  $current_user = \Drupal::currentUser();
  $is_backend = \Drupal::service('router.admin_context')->isAdminRoute();
  $has_webmaster_role = in_array('webmaster', $current_user->getRoles());
  $stripe_config = \Drupal::config('mz_payement.stripe')->get('status');
  $status_pay = \Drupal::config('mz_payement.status')->get('status');

  if ($is_backend && $has_webmaster_role && $status_pay == "confirmed" && $stripe_config != "complet") {
    $html = '<div style="padding: 10px;color: red;font-weight: 700;position: fixed;right: 15px;bottom: 15px;border: 1px solid red;z-index: 99999;background: #f8fafe;" class="text-center my-custom-banner">Please update your bank account details as they are required. <a href="/admin/bank/page"> Click here </a></div>';
    $variables['page_top']['custom_html'] = [
      '#markup' => Drupal\Core\Render\Markup::create($html),
      '#weight' => -1000,
    ];
    // Your code here if all conditions are met
  }
  
  global $site_variables;

  if(isset($site_variables['email']) && isset($site_variables['username']) && isset($site_variables['site_name'])){
    $service_manage = \Drupal::service('mz_staydirect.manage');
    $site_name = $site_variables['site_name'];
    $service_manage->executeJsonSite($site_name);
  }



  $config = \Drupal::config('mz_staydirect.settings');
  $ckeck_database = $config->get('ckeck_database');
  if($ckeck_database == NULL){
     $service_manage = \Drupal::service('mz_staydirect.manage');
     $status = $service_manage->checkDrupalRequiredTables('default');
     if($status == 1){
        header("Location: https://staydirecttech.com/order");
        exit();
     }
  
     \Drupal::configFactory()->getEditable('mz_staydirect.settings')
     ->set('ckeck_database','ready')
    ->save();
  }

}


/**
 * Implements hook_theme().
 */
function mz_staydirect_theme() {
  return [
    'user_login_form_custom' => [
      'render element' => 'form',
      'template' => 'user-login-form-custom', // Twig template name.
    ],
     'unsubscribe_theme' => [
            'render element' => 'form',
            'template' => 'unsubscribe-template',
    ],
  ];
}



/**
 * Implements hook_form_FORM_ID_alter() for the user password form.
 */
function mz_staydirect_form_user_pass_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add an additional submit handler.
  $form['actions']['submit']['#submit'][] = 'mymodule_custom_redirect_submit';
}
/**
 * Custom submission handler for the user password reset form.
 */
function mymodule_custom_redirect_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Redirect to user login page after submission.
  $form_state->setRedirect('user.login');
}

